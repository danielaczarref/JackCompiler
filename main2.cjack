<class>
<keyword> class </keyword>
<identifier> Main </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> static </keyword>
<keyword> boolean </keyword>
<identifier> test </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<symbol> ( </symbol>
<keyword> char </keyword>
<identifier> foo </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> bar </identifier>
<symbol> , </symbol>
<keyword> boolean </keyword>
<identifier> bol </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<subroutineBody>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> olaMundo </identifier>
<symbol> , </symbol>
<identifier> olaGlobo </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> olaola </identifier>
<symbol> , </symbol>
<identifier> oiDani </identifier>
<symbol> ; </symbol>
</varDec>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 23 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 34 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 54 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
</ifStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 100 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 55 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 100 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
</ifStatement>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
<symbol> } </symbol>
</subroutineBody>
<symbol> } </symbol>
</class>
<class>
<keyword> class </keyword>
<identifier> Main </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> test </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<symbol> ( </symbol>
<keyword> char </keyword>
<identifier> foo </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> bar </identifier>
<symbol> , </symbol>
<keyword> boolean </keyword>
<identifier> bol </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<subroutineBody>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> olaMundo </identifier>
<symbol> , </symbol>
<identifier> olaGlobo </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> olaola </identifier>
<symbol> , </symbol>
<identifier> oiDani </identifier>
<symbol> ; </symbol>
</varDec>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 23 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 34 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 54 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
</ifStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 100 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 55 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 100 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
</ifStatement>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
<symbol> } </symbol>
</subroutineBody>
<symbol> } </symbol>
</class>
<class>
<keyword> class </keyword>
<identifier> Main </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> test </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<symbol> ( </symbol>
<keyword> char </keyword>
<identifier> foo </identifier>
<symbol> , </symbol>
<keyword> int </keyword>
<identifier> bar </identifier>
<symbol> , </symbol>
<keyword> boolean </keyword>
<identifier> bol </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<subroutineBody>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> olaMundo </identifier>
<symbol> , </symbol>
<identifier> olaGlobo </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> olaola </identifier>
<symbol> , </symbol>
<identifier> oiDani </identifier>
<symbol> ; </symbol>
</varDec>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 23 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 34 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 54 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
</ifStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 100 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 55 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 100 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
</ifStatement>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
<symbol> } </symbol>
</subroutineBody>
<symbol> } </symbol>
</class>
<class>
<keyword> class </keyword>
<identifier> Main </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> test </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<symbol> ( </symbol>
<keyword> char </keyword>
<identifier> foo </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<subroutineBody>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> olaMundo </identifier>
<symbol> , </symbol>
<identifier> olaGlobo </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> olaola </identifier>
<symbol> , </symbol>
<identifier> oiDani </identifier>
<symbol> ; </symbol>
</varDec>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 23 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 34 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 54 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
</ifStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 100 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 55 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 100 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
</ifStatement>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
<symbol> } </symbol>
</subroutineBody>
<symbol> } </symbol>
</class>
<class>
<keyword> class </keyword>
<identifier> Main </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> test </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<symbol> ( </symbol>
<keyword> char </keyword>
<identifier> foo </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<subroutineBody>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> variable1 </identifier>
<symbol> , </symbol>
<identifier> variable2 </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> olaola </identifier>
<symbol> , </symbol>
<identifier> oiDani </identifier>
<symbol> ; </symbol>
</varDec>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 23 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 34 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 54 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
</ifStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 100 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 55 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 100 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
</ifStatement>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
<symbol> } </symbol>
</subroutineBody>
<symbol> } </symbol>
</class>
<class>
<keyword> class </keyword>
<identifier> Main </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> static </keyword>
<class>
<keyword> class </keyword>
<identifier> Main </identifier>
<symbol> { </symbol>
<classVarDec>
<keyword> static </keyword>
<keyword> int </keyword>
<identifier> test </identifier>
<symbol> ; </symbol>
</classVarDec>
<subroutineDec>
<keyword> function </keyword>
<keyword> void </keyword>
<identifier> main </identifier>
<symbol> ( </symbol>
<keyword> char </keyword>
<identifier> foo </identifier>
<symbol> ) </symbol>
<symbol> { </symbol>
<subroutineBody>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> variable1 </identifier>
<symbol> , </symbol>
<identifier> variable2 </identifier>
<symbol> ; </symbol>
</varDec>
<varDec>
<keyword> var </keyword>
<keyword> int </keyword>
<identifier> olaola </identifier>
<symbol> , </symbol>
<identifier> oiDani </identifier>
<symbol> ; </symbol>
</varDec>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 23 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 3 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 2 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 34 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 54 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
</ifStatement>
<whileStatement>
<keyword> while </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 2 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<ifStatement>
<keyword> if </keyword>
<symbol> ( </symbol>
<expression>
<term>
<integerConstant> 100 </integerConstant>
</term>
<symbol> &gt </symbol>
<term>
<integerConstant> 3 </integerConstant>
</term>
</expression>
<symbol> ) </symbol>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> x </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 55 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
<keyword> else </keyword>
<symbol> { </symbol>
<keyword> let </keyword>
<identifier> y </identifier>
<symbol> = </symbol>
<expression>
<term>
<integerConstant> 100 </integerConstant>
</term>
</expression>
<symbol> ; </symbol>
</letStatement>
<symbol> } </symbol>
</ifStatement>
<symbol> } </symbol>
</whileStatement>
<returnStatement>
<keyword> return </keyword>
<symbol> ; </symbol>
</returnStatement>
<symbol> } </symbol>
</subroutineBody>
<symbol> } </symbol>
</class>
